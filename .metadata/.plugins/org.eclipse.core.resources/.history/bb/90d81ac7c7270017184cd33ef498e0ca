import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Random;
import java.util.Scanner;

public class HitAndBlowTest {
	public static void main(String[] args) {
		String degit = inputDegit();
		toCharSlow();
		int successCount = inputAns(makeNumList(degit));
		System.out.println(successCount + "回でクリア");

	}

	/**
	 * PCの文字出力演出
	 * @param str
	 */
	public static void toCharSlow() {
		System.out.print("コンピュータが数字を選んでいます");
		for (int i = 0; i < 3; i++) {
			try {
				// 指定ミリ秒の間眠る
				Thread.sleep(600);
			}
			catch (InterruptedException e) {
				e.printStackTrace();
			}
			System.out.print("。");
		}
		System.out.println("");
	}

	/**
	 * 桁数判定
	 * @param inputD
	 * @return inputDInt
	 */
	public static String inputDegit() {
		String num = null;
		System.out.println("何桁の数字で開始しますか？（1〜9）");
		loop : while (true) {
			Scanner sc = new Scanner(System.in);
			String input = sc.nextLine();
			String[] inputNumList = input.split("");
			String[] testNum = {"1","2","3","4","5","6","7","8","9"};
			for (String inputNum : inputNumList) {
				if (Arrays.asList(testNum).contains(inputNum)) {
					if (inputNumList.length == 1) {
						num = inputNum;
						break loop;
					} else
						System.out.println("正しい数値を入力してください");
					continue loop;
				} else
					System.out.println("数値を入力してください");
				continue loop;
			}
		}
		return num;
	}

	/**
	 * 引数で渡した桁の数値をランダムで生成
	 * @param digit
	 * @return num
	 */
	public static List<String> makeNumList(String digit) {
		List<String> numList = new ArrayList<String>();
		while (true) {
				String ranNum = String.valueOf(new Random().nextInt(9) + 1);
				if (numList.contains(ranNum) == false)
					numList.add(ranNum);
				if (numList.size() == Integer.parseInt(digit))
					break;
		}
		return numList;
	}

	/**
	 * 回答の入力判定
	 * @param pcUnitList
	 */
	public static int inputAns(List<String> pcUnitList) {
		Scanner sc = new Scanner(System.in);
		Map<String,Integer> hobMap = new HashMap<String,Integer>();
		int count = 0;
		String num = null;
		List<String> testList = new ArrayList<String>();
		for (int i = 1; i < 10; i++) {
			String str = String.valueOf(i);
			testList.add(str);
		}
		loop1 : while (true) {
			count++;
			loop2 : while (true) {
				System.out.println(count + "回目の回答");
				String inputNum = sc.nextLine();
				List<String> inputNumList = new ArrayList<String>(Arrays.asList(inputNum.split("")));
				if (inputNumList.size() == pcUnitList.size()) {
					for (String input : inputNumList) {
						if (testList.contains(input)) {
							List<String> inputList2 = new ArrayList<String>(inputNumList);
							inputList2.remove(input);
							if ((inputList2.contains(input)) == false) {
								num = inputNum;
								continue;
							}
							else
								System.out.println("重複している値があります");
							continue loop2;
						}
						else
							System.out.println("数値ではありません");
						continue loop2;
					}
					break loop2;
				}
				else
					System.out.println("桁数に過ちがあります");
				continue loop2;
			}
			int hitCount = hitBrewCount(count, num, pcUnitList);
			if (hitCount == pcUnitList.size())
				break loop1;
		}
		return count;
	}

	/**
	 * ゲーム結果の判定
	 * @param str
	 * @return
	 */
	public static int hitBrewCount(int count, String num, List<String> pcUnitList) {
		Map<String,Integer> hobMap = new HashMap<String,Integer>();
		hobMap.put("Hit", 0);
		hobMap.put("Blow", 0);
		List<String> numUnitList = new ArrayList<String>(Arrays.asList(num.split("")));
		for(String pcUnit : pcUnitList) {
			loop : for(String numUnit : numUnitList) {
				if (pcUnitList.contains(numUnit)) {
					if (pcUnit.equals(numUnit)) {
						hobMap.put("Hit", hobMap.get("Hit") + 1);
						numUnitList.remove(numUnit);
						break loop;
					}
					else {
						hobMap.put("Blow", hobMap.get("Blow") + 1);
						numUnitList.remove(numUnit);
						break loop;
					}
				} else
					continue loop;
			}
		}
		if (hobMap.get("Hit") != pcUnitList.size())
			System.out.println(num + " （" + hobMap.get("Hit") + " Hit: " + hobMap.get("Blow") + " Blow）");
		return hobMap.get("Hit");
	}
}
